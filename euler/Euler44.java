package euler;

import java.util.ArrayList;
import java.util.HashSet;

/*
 Pentagonal numbers are generated by the formula, P(n)= n(3n - 1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of D?

 
 */


public class Euler44 {

	public static void main(String[] args) {
		//no upper limit given - this one actually only generates one that matches the pent test
		ArrayList<Integer> pArray = getPentagonals(10000);
		HashSet<Integer> pSet = new HashSet<Integer>(pArray);
		//pArray.forEach(a -> System.out.println(a));
		int pj = 0, pk = 0, smallestDiff = (int)Double.POSITIVE_INFINITY;
		for (int i = 0; i < pArray.size() - 1; i++) {
			for (int j = i + 1; j < pArray.size(); j++) {
				int a = pArray.get(i);
				int b = pArray.get(j);
				int sum = a + b;
				int difference = Math.abs(a - b);
				if (pSet.contains(sum) && pSet.contains(difference)) {
					//System.out.println(difference);
					if (difference < smallestDiff) {
						pj = a;
						pk = b;
						smallestDiff = difference;
					}
				}
				
			}
		}
		System.out.println("Pj: " + pj + ", Pk: " + pk + ", difference: " + smallestDiff);
	}

	
	public static ArrayList<Integer> getPentagonals(int max) {
		ArrayList<Integer> pentagonals = new ArrayList<Integer>();
		for (int i = 1; i <= max; i++) {
			int pentagonal = (i * ((3 * i) - 1)) / 2;
			pentagonals.add(pentagonal);
		}
		return pentagonals;
	}
	
}